#!/bin/sh

echo "Content-type: text/html"
echo 
echo "<html><head><title>Configure WiFi</title></head>"

echo '<body>'


  # Make sure we have been invoked properly.

  if [ "$REQUEST_METHOD" != "GET" ]; then
        echo "<hr>Script Error:"\
             "<br>Usage error, cannot complete request, REQUEST_METHOD!=GET."\
             "<br>Check your FORM declaration and be sure to use METHOD=\"GET\".<hr>"
        exit 1
  fi

  # If no search arguments, exit gracefully now.

  if [ -z "$QUERY_STRING" ]; then
        exit 0
  else
     # No looping this time, just extract the data you are looking for with sed:
     SSID=`echo "$QUERY_STRING" | sed -n 's/^.*val_ssid=\([^&]*\).*$/\1/p' | sed -f /www/cgi-bin/urldecode.sed`
     ET=`echo "$QUERY_STRING" | sed -n 's/^.*val_et=\([^&]*\).*$/\1/p' | sed -f /www/cgi-bin/urldecode.sed`
     KEY=`echo "$QUERY_STRING" | sed -n 's/^.*val_key=\([^&]*\).*$/\1/p' | sed -f /www/cgi-bin/urldecode.sed`
     IP=`echo "$QUERY_STRING" | sed -n 's/^.*val_ipaddr=\([^&]*\).*$/\1/p' | sed -f /www/cgi-bin/urldecode.sed`
     NM=`echo "$QUERY_STRING" | sed -n 's/^.*val_netmask=\([^&]*\).*$/\1/p' | sed -f /www/cgi-bin/urldecode.sed`
     GW=`echo "$QUERY_STRING" | sed -n 's/^.*val_gateway=\([^&]*\).*$/\1/p' | sed -f /www/cgi-bin/urldecode.sed`
     DNS=`echo "$QUERY_STRING" | sed -n 's/^.*val_dns=\([^&]*\).*$/\1/p' | sed -f /www/cgi-bin/urldecode.sed`
     NTP=`echo "$QUERY_STRING" | sed -n 's/^.*val_ntp=\([^&]*\).*$/\1/p' | sed -f /www/cgi-bin/urldecode.sed`
     CHK_DHCP=`echo "$QUERY_STRING" | sed -n 's/^.*is_dhcp=\([^&]*\).*$/\1/p' | sed -f /www/cgi-bin/urldecode.sed`
     CHK_NTP=`echo "$QUERY_STRING" | sed -n 's/^.*is_ntp=\([^&]*\).*$/\1/p' | sed -f /www/cgi-bin/urldecode.sed`

     uci delete wireless.radio0.disabled
     ubus call uci get '{ "config": "wireless", "match": {"device":"radio0"} }' | grep \".name\" |awk '{print $2}' | awk -F',' '{print $1}' | awk -F'"' '{print $2}'| grep '^cfg\|^internet$' | awk '{system("uci delete wireless."$0)}'
     uci commit wireless
     ubus call uci get '{ "config": "network"}' | grep \".name\" |awk '{print $2}' | awk -F',' '{print $1}' | awk -F'"' '{print $2}'| grep '^wan$\|^wwan$' | awk '{system("uci delete network."$0)}'
     uci commit network
     ## adding wifi
     val_dict="{ \"ifname\":\"internet\", \"network\": \"wwan\", \"encryption\": \""$ET"\", \"device\": \"radio0\", \"mode\": \"sta\", \"ssid\": \""$SSID"\""
     if [ "$ET" != "none" ]; then
         val_dict=$val_dict", \"key\": \""$KEY"\""
     fi
     val_dict=$val_dict" }"
     wireless_op=`ubus call uci add "{ 'config': 'wireless', 'name': 'internet', 'type': 'wifi-iface',  'values': $val_dict}"`
     if [ $? -eq 0 ]; then
          echo '<br>'
          echo "committing changes to wireless config"
          wireless_commit=`uci commit wireless`
          if [ $? -eq 0 ]; then
              echo '<br>'
              echo "changes commited to wireless config"
          else
              echo '<br>'
              echo "could not commit changes to wireless config"                                                                                 
          fi
      else
          echo '<br>'
          echo "could not modify wireless config"
      fi
     ## for adding network
     val_dict="{ \"ifname\":\"internet\""
     if [ "$CHK_DHCP" != "dhcp" ]; then
         if [[ -n "$IP" && -n "$NM" && -n "$GW" ]]; then
             val_dict=$val_dict", \"proto\": \"static\""
             val_dict=$val_dict", \"ipaddr\": \""$IP"\""
             val_dict=$val_dict", \"netmask\": \""$NM"\""
             val_dict=$val_dict", \"gateway\": \""$GW"\" }"
             if [[ -n "$DNS" ]];then
                 uci add_list dhcp.@dnsmasq[0].server=$DNS
             else
                 uci add_list dhcp.@dnsmasq[0].server=8.8.8.8
             fi
             uci commit dhcp
         else
             val_dict=$val_dict", \"proto\": \"dhcp\" }"
         fi
      else
         val_dict=$val_dict", \"proto\": \"dhcp\" }"
      fi
      if [[ -n "$NTP" ]];then
          uci add_list system.ntp.server=$NTP
          uci commit system
      fi
      uci del network.lan._orig_ifname
      uci del network.lan._orig_bridge
      uci set network.lan.ifname=eth0
      network_op=`ubus call uci add "{ 'config': 'network', 'name': 'wwan', 'type': 'interface',  'values': $val_dict}"`
      if [ $? -eq 0 ]; then
          echo '<br>'
          echo "committing changes to network config"
          network_commit=`uci commit network`
          if [ $? -eq 0 ]; then
              echo '<br>'
              echo "changes commited to network config"
          else
              uci revert network
              if [[ -n "$DNS" ]];then
                  uci del_list dhcp.@dnsmasq[0].server=$DNS
                  uci commit dhcp
              fi
	      if [[ -n "$NTP" ]];then
	          uci del_list system.ntp.server=$NTP
	          uci commit system
	      fi
              echo '<br>'
              echo "could not commit changes to network config"
          fi
      else
          uci revert network
          echo '<br>'
          echo "could not modify network config"
      fi
             
  fi

echo '<br>'                                                                                                            
uci delete firewall.@forwarding[0]
uci add_list firewall.@zone[1].network="wwan"
val_dict="{ \"name\":\"wan_80\", \"proto\": \"tcp\", \"src\": \"wan\", \"dest_port\": 80, \"target\": \"ACCEPT\", \"enabled\": 1 }"  
firewall_op=`ubus call uci add "{ 'config': 'firewall', 'name': 'wan_80', 'type': 'rule',  'values': $val_dict}"`                  
val_dict="{ \"name\":\"wan_22\", \"proto\": \"tcp\", \"src\": \"wan\", \"dest_port\": 22, \"target\": \"ACCEPT\", \"enabled\": 1 }"
firewall_op=`ubus call uci add "{ 'config': 'firewall', 'name': 'wan_22', 'type': 'rule',  'values': $val_dict}"`
uci commit firewall                                    
/etc/init.d/firewall restart
uci set sensor-restart.sensor.interface=internet                                                                                                
uci commit sensor-restart
echo 'restarting network interfaces' 
ubus call network restart
echo '<meta http-equiv="Refresh" content="1; url=overview">'

echo '</body>'
echo '</html>'
