#!/bin/sh

echo "Content-type: text/html"
echo 
echo "<html><head><title>Configure WiFi</title></head>"

echo '<body>'


  # Make sure we have been invoked properly.

  if [ "$REQUEST_METHOD" != "GET" ]; then
        echo "<hr>Script Error:"\
             "<br>Usage error, cannot complete request, REQUEST_METHOD!=GET."\
             "<br>Check your FORM declaration and be sure to use METHOD=\"GET\".<hr>"
        exit 1
  fi

  # If no search arguments, exit gracefully now.

  if [ -z "$QUERY_STRING" ]; then
        exit 0
  else
     # No looping this time, just extract the data you are looking for with sed:
     APN=`echo "$QUERY_STRING" | sed -n 's/^.*val_apn=\([^&]*\).*$/\1/p' | sed -f /www/cgi-bin/urldecode.sed`
     PIN=`echo "$QUERY_STRING" | sed -n 's/^.*val_pincode=\([^&]*\).*$/\1/p' | sed -f /www/cgi-bin/urldecode.sed`
     SERVICE=`echo "$QUERY_STRING" | sed -n 's/^.*val_service=\([^&]*\).*$/\1/p' | sed -f /www/cgi-bin/urldecode.sed`
     DEVICE=`echo "$QUERY_STRING" | sed -n 's/^.*val_device=\([^&]*\).*$/\1/p' | sed -f /www/cgi-bin/urldecode.sed`
     USERNAME=`echo "$QUERY_STRING" | sed -n 's/^.*val_username=\([^&]*\).*$/\1/p' | sed -f /www/cgi-bin/urldecode.sed`
     PASSWORD=`echo "$QUERY_STRING" | sed -n 's/^.*val_password=\([^&]*\).*$/\1/p' | sed -f /www/cgi-bin/urldecode.sed`
     MAXWAIT=`echo "$QUERY_STRING" | sed -n 's/^.*val_maxwait=\([^&]*\).*$/\1/p' | sed -f /www/cgi-bin/urldecode.sed`
     DEFROUTE=`echo "$QUERY_STRING" | sed -n 's/^.*val_defroute=\([^&]*\).*$/\1/p' | sed -f /www/cgi-bin/urldecode.sed`
     CHK_RNDIS=`echo "$QUERY_STRING" | sed -n 's/^.*is_rndis=\([^&]*\).*$/\1/p' | sed -f /www/cgi-bin/urldecode.sed`

     ubus call uci get '{ "config": "wireless", "match": {"device":"radio0"} }' | grep \".name\" |awk '{print $2}' | awk -F',' '{print $1}' | awk -F'"' '{print $2}'| grep '^cfg\|^internet$' | awk '{system("uci delete wireless."$0)}'
     uci commit wireless
     ubus call uci get '{ "config": "network", "section": "wwan" }' | grep \".name\" |awk '{print $2}' | awk -F',' '{print $1}' | awk -F'"' '{print $2}'| grep '^wan$\|^wwan$' | awk '{system("uci delete network."$0)}'
     uci commit network
     ubus call uci get '{ "config": "network", "section": "wan" }' | grep \".name\" |awk '{print $2}' | awk -F',' '{print $1}' | awk -F'"' '{print $2}'| grep '^wan$\|^wwan$' | awk '{system("uci delete network."$0)}'
     uci commit network
     ## for adding network
     if [ "$CHK_RNDIS" != "rndis" ]; then
     val_dict="{ \"apn\":\""$APN"\""
     val_dict=$val_dict", \"pincode\": \""$PIN"\""
     val_dict=$val_dict", \"service\": \""$SERVICE"\""
     val_dict=$val_dict", \"device\": \""$DEVICE"\""
     val_dict=$val_dict", \"username\": \""$USERNAME"\""
     val_dict=$val_dict", \"password\": \""$PASSWORD"\""
     val_dict=$val_dict", \"maxwait\": \""$MAXWAIT"\""
     val_dict=$val_dict", \"proto\": \"3g\""
     val_dict=$val_dict", \"defaultroute\": \""$DEFROUTE"\" }"
     uci del network.lan._orig_ifname
     uci del network.lan._orig_bridge
     uci set network.lan.ifname=eth0
     else
     val_dict="{ \"ifname\":\"usb0\""
     val_dict=$val_dict", \"proto\": \"dhcp\" }"
     uci del network.lan._orig_ifname
     uci del network.lan._orig_bridge
     fi
     network_op=`ubus call uci add "{ 'config': 'network', 'name': 'wan', 'type': 'interface',  'values': $val_dict}"`
      if [ $? -eq 0 ]; then
          echo '<br>'
          echo "committing changes to network config"
          network_commit=`uci commit network`
          if [ $? -eq 0 ]; then
              echo '<br>'
              echo "changes commited to network config"
          else
              uci revert network
              echo '<br>'
              echo "could not commit changes to network config"
          fi
      else
          uci revert network
          echo '<br>'
          echo "could not modify network config"
      fi
             
  fi

echo '<br>'                                                                                                            
uci add_list firewall.@zone[1].network="wwan"
val_dict="{ \"name\":\"wan_80\", \"proto\": \"tcp\", \"src\": \"wan\", \"dest_port\": 80, \"target\": \"ACCEPT\", \"enabled\": 1 }"
firewall_op=`ubus call uci add "{ 'config': 'firewall', 'name': 'wan_80', 'type': 'rule',  'values': $val_dict}"`
val_dict="{ \"name\":\"wan_22\", \"proto\": \"tcp\", \"src\": \"wan\", \"dest_port\": 22, \"target\": \"ACCEPT\", \"enabled\": 1 }"
firewall_op=`ubus call uci add "{ 'config': 'firewall', 'name': 'wan_22', 'type': 'rule',  'values': $val_dict}"`
uci commit firewall              
/etc/init.d/firewall restart
if [ "$CHK_RNDIS" != "rndis" ]; then
uci set sensor-restart.sensor.interface=3g-wan  
else
uci set sensor-restart.sensor.interface=usb0
fi
uci commit sensor-restart
echo 'restarting network interfaces' 
ubus call network restart

echo '<meta http-equiv="Refresh" content="1; url=overview">'

echo '</body>'
echo '</html>'

